{"version":3,"sources":["components/Box.js","components/Board.js","components/Intro.js","App.js","reportWebVitals.js","index.js"],"names":["Box","value","handleClick","arrNum","onClick","className","Board","values","Grid","map","i","Intro","App","useState","mySymbol","setMySymbol","opSymbol","setOpSymbol","boardSize","Array","fill","setValues","iNext","setINext","val","copyValues","slice","console","log","checkForWinner","val1","val2","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.4c68ac26.chunk.js","sourcesContent":["const Box = ({value, handleClick, arrNum}) => {\n    return (\n        <div onClick={()=>handleClick(value,arrNum)} className=\"square\" >\n            { value }\n        </div>\n    )\n}\n\nexport default Box\n","import Box from './Box'\n\nconst Board = ({values, handleClick}) => {\n    const Grid = values.map( (value, i) => <Box value={value} key={i} arrNum={i} handleClick={handleClick} />)\n    return (\n        <div className=\"board\">\n            { Grid }\n        </div>\n    )\n}\n\nexport default Board\n","const Intro = ({ handleClick }) => {\n    return (\n        <div onClick={()=>handleClick(\"X\",\"O\")}>\n            <h1>Yololo trololo</h1>\n        </div>\n    )\n}\n\nexport default Intro\n","import './App.css';\nimport {useState} from 'react'\nimport Board from './components/Board'\nimport Intro from './components/Intro'\n\n\nfunction checkForWinner(values, boardSize) {\n  for (let i = 0; i < boardSize * boardSize; i++) {\n      //checking for winner in horizontal plane\n      if (values[i] !== null &&\n          values[i] === values[i + 1] &&\n          values[i + 1] === values[i + 2] &&\n          values[i + 2] === values[i + 3] &&\n          values[i + 3] === values[i + 4]) {\n              console.log('winner is ', values[i], ' horizontally');\n      }\n      //checking for winner in vertical plane\n      else if (values[i] !== null &&\n          values[i] === values[i + 20] &&\n          values[i + 20] === values[i + 40] &&\n          values[i + 40] === values[i + 60] &&\n          values[i + 60] === values[i + 80]) {\n              console.log('winner is ', values[i], ' vertically');\n      }\n      //checking for winner on a diagonal forward plane\n      else if (\n          values[i] !== null &&\n          values[i] ===      values[i + 21] &&\n          values[i + 21] === values[i + 42] &&\n          values[i + 42] === values[i + 63] &&\n          values[i + 63] === values[i + 84]) {\n              console.log('winner is '+ values[i]+ ' diagonally');\n      }\n      //checking for winner in a minus diagonal option\n      else if (\n          values[i] !== null &&\n          values[i] === values[i + 19] &&\n          values[i + 19] === values[i + 38] &&\n          values[i + 38] === values[i + 57] &&\n          values[i + 57] === values[i + 76]) {\n          console.log('winner is '+ values[i] + ' anti-diagonally');\n      }\n  }\n}\n\nfunction App() {\n  const [mySymbol, setMySymbol] = useState(null)\n  const [opSymbol, setOpSymbol] = useState(null)\n  const [boardSize, setBoardSize] = useState(20)\n  const [values, setValues] = useState(Array(boardSize*boardSize).fill(null) )\n  const [iNext, setINext] = useState(true)\n  const handleClick = (val, i) => {\n    const copyValues = values.slice()\n    copyValues[i] = iNext ? mySymbol : opSymbol\n    if(val || checkForWinner(copyValues,boardSize)) return null\n    setINext(!iNext)\n    setValues(copyValues)\n  }\n  const handleSetup = (val1, val2) => {\n    setMySymbol(val1)\n    setOpSymbol(val2)\n  }\n  return (\n    <div className=\"App ttt5\">\n      {\n        !mySymbol || !opSymbol ?\n        <Intro handleClick={handleSetup} />\n        :\n        <Board values={values} handleClick={handleClick}  />\n      }\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}